services:
  web:
    build:
      context: ./docker/dcmweb
      dockerfile: Dockerfile
    container_name: web
    # db起動後にwebを起動
    depends_on:
      - db1
      - db2
    # ローカルのhtmlをコンテナの/var/www/htmlにマウント
    volumes:
      - ./html:/var/www/html
    ports:
      - ${WEB_PORT}:80
    command: >
      sh -c "
      cd /var/www/html &&
      rm -f config/app.php &&
      ln -s /var/www/html/config/local/app.php /var/www/html/config/app.php &&
      composer install --no-interaction &&
      /usr/sbin/httpd -D FOREGROUND
      "
    tty: true

  file:
    build:
      context: ./docker/dcmfile
      dockerfile: Dockerfile
    container_name: file
    ports:
      - "${FILE_PORT}:22"
    depends_on:
      - web

  db1:
    image: mysql:5.5
    container_name: db1
    volumes:
      - db1-data:/var/lib/mysql
      - ./docker/dcmdb/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/dcmdb/sql/cakephptest.sql:/docker-entrypoint-initdb.d/01_cakephptest.sql
      - ./docker/dcmdb/sql/masterkanri.sql:/docker-entrypoint-initdb.d/02_masterkanri.sql
    environment:
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_ROOT_PASSWORD=${DB_PASS}
    ports:
      - ${DB_PORT}:3306
    # command: >
      # bash -c "chmod 644 /etc/mysql/conf.d/my.cnf && docker-entrypoint.sh mysqld"

  db2:
    image: mysql:5.5
    container_name: db2
    environment:
      MYSQL_DATABASE: ${SPWEB_DB_NAME}
      MYSQL_USER: ${SPWEB_DB_USER}
      MYSQL_PASSWORD: ${SPWEB_DB_PASS}
      MYSQL_ROOT_PASSWORD: ${SPWEB_DB_PASS}
    volumes:
      - db2-data:/var/lib/mysql
      - ./docker/spwebdb/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "${SPWEB_DB_PORT}:3306"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2.2
    container_name: phpmyadmin
    depends_on:
      - db1
      - db2
    ports:
      - "${PMA_PORT}:80"
    environment:
      PMA_ARBITRARY: 1          # ローカル以外にも指定できるようになる
      PMA_HOSTS: db1,db2
      # PMA_USER: ${DB_USER}
      # PMA_PASSWORD: ${DB_PASS}
    restart: always

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "${MAIL_WEB_PORT}:8025"
      - "${MAIL_PORT}:1025"
    volumes:
      - mailhog-data:/tmp
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /tmp

volumes:
  db1-data:
  db2-data:
  mailhog-data:
